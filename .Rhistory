source("C:/Users/lenovo/Documents/GitHub/sustainability_dashboard/other_files/helper_functions.R", local = TRUE)
df <- readRDS("C:/Users/lenovo/Documents/GitHub/sustainability_dashboard/dashboard_leaflet/all_rcp.rds")
breaks <- c(0, 0.05, 0.1, 0.3, 0.5, 1)
df$bin_change_rcp6p0 <- new_bins(df$changecal_rcp6p0, breaks)
library(rgdal)
library(raster)
library(cmocean)
library(leaflet)
file_name = "C:/Users/lenovo/Documents/GitHub/sustainability_dashboard/dashboard_leaflet/r_opt_bin_cal.tif"
x <- raster(file_name)
# maybe source that out
x <- setMinMax(x)
pal = colorFactor(cmocean(name = 'curl', direction = -1)(11), sort(unique(values(x)),
ordered = TRUE,
na.color = "transparent")
pal = colorFactor(cmocean(name = 'curl', direction = -1)(11), sort(unique(values(x))),
ordered = TRUE,
na.color = "transparent")
pal = colorFactor(cmocean(name = 'curl', direction = -1)(11), sort(unique(values(x))),
ordered = TRUE,
na.color = "transparent")
leaflet() %>%
#addTiles() %>%
addRasterImage(x = x ,
colors = pal,
opacity = 1,
project = FALSE) %>%
addLegend(pal = pal, values = values(x),
title = title())
leaflet() %>%
#addTiles() %>%
addRasterImage(x = x ,
colors = pal,
opacity = 1,
project = FALSE) %>%
addLegend(pal = pal, values = values(x),
title = "Test")
library(tidyverse)
library(ggthemes)
library(cmocean)
library(cowplot)
source("C:/Users/lenovo/Documents/GitHub/sustainability_dashboard/other_files/helper_functions.R", local = TRUE)
df <- readRDS("C:/Users/lenovo/Documents/GitHub/sustainability_dashboard/dashboard_leaflet/all_rcp.rds")
# drop rcp4p5
df <- df[-c(grep("rcp4p5", names(df)))]
# we need to modify changecal_rcp2p6
df$changecal_rcp2p6 <- df$changecal_rcp2p6 *-1
source_col <- c("changecal_rcp2p6", "changecal_rcp6p0", "changecal_rcp8p5")
target_col <- c("bin_change_rcp2p6", "bin_change_rcp6p0", "bin_change_rcp8p5")
for (i in seq_along(source_col)){
df[[target_col[i]]] <- new_bins(df[[source_col[i]]], breaks)
}
# make Absolute bins ----
breaks <- c(0, 0.05, 0.1, 0.3, 0.5, 1)
for (i in seq_along(source_col)){
df[[target_col[i]]] <- new_bins(df[[source_col[i]]], breaks)
}
df$bin_change_rcp2p6 <- df$bin_change_rcp2p6 *-1
growth_cols <- names(df)[grep("growth_rate", names(df))]
for (i in seq_along(growth_cols)){
# remove outliers and infinity
col = growth_cols[i]
df[[col]][is.infinite(df[[col]])] <- 0
df[[col]][df[[col]] > 1000] <- NA
bin_name <- paste0("bin_", col)
df[[bin_name]] <- 0
pos_bool <- df[[col]] > 0 & !is.na(df[[col]])
neg_bool <- df[[col]] < 0 & !is.na(df[[col]])
df[[bin_name]][pos_bool] <- bin_maker(df[[col]][pos_bool], breaks)
df[[bin_name]][neg_bool] <- bin_maker(df[[col]][neg_bool], breaks)
}
# creating raster files for leaflet ----
# assign new target cols
target_cols <- names(df)[grep("bin", names(df))]
target_cols
df[, 1:2]
for (i in target_cols){
if ("growth" %in% i){
print("growth")
}
else{
print("Absolute")
}
}
target_cols
for (i in target_cols){
if (grepl("growth", i)){
print("growth")
}
else{
print("Absolute")
}
}
r <- raster(ncol = 4320, nrow = 2160,
xmn= -180, xmx= 180, ymn = -90, ymx = 90,
crs = "EPSG:4326")
library(raster)
r <- raster(ncol = 4320, nrow = 2160,
xmn= -180, xmx= 180, ymn = -90, ymx = 90,
crs = "EPSG:4326")
for (i in seq_along(target_cols)){
x <- rasterize(df[, 1:2], r, df[[target_cols[i]]])
if (grepl("growth", i )){
values(x) <- round(values(x), 3)
}
else{
values(x) <- round(values(x))
}
x <- setMinMax(x)
x <- projectRaster(x, crs = CRS('+init=EPSG:3857'),method = 'ngb')
x <- setMinMax(x)
file_name <- paste0(item, ".tif")
writeRaster(x, file_name,options=c('TFW=YES'))
}
for (i in seq_along(target_cols)){
x <- rasterize(df[, 1:2], r, df[[target_cols[i]]])
if (grepl("growth", target_cols[i] )){
values(x) <- round(values(x), 3)
}
else{
values(x) <- round(values(x))
}
x <- setMinMax(x)
x <- projectRaster(x, crs = CRS('+init=EPSG:3857'),method = 'ngb')
x <- setMinMax(x)
file_name <- paste0(target_cols[i], ".tif")
writeRaster(x, file_name,options=c('TFW=YES'))
}
target_cols
names(df)
x
test <- raster("bin_change_rcp2p6.tif")
test
r
file_name = "C:/Users/lenovo/Documents/GitHub/sustainability_dashboard/dashboard_leaflet/r_opt_bin_cal.tif"
x <- raster(file_name)
x
file_name = "C:/Users/lenovo/Documents/GitHub/sustainability_dashboard/dashboard_leaflet/opt_bin_cal.tif"
x <- raster(file_name)
x
# maybe source that out
values(x) <- round(values(x))
pal = colorFactor(cmocean(name = 'curl', direction = -1, clip = 0.1)(11), sort(unique(values(x))),
ordered = TRUE,
na.color = "transparent")
library(leaflet)
library(cmocean)
pal = colorFactor(cmocean(name = 'curl', direction = -1, clip = 0.1)(11), sort(unique(values(x))),
ordered = TRUE,
na.color = "transparent")
leaflet() %>%
#addTiles() %>%
addRasterImage(x = x ,
colors = pal,
opacity = 1,
project = FALSE) %>%
addLegend(pal = pal, values = values(x),
title = "Test")
leaflet() %>%
#addTiles() %>%
addRasterImage(x = x ,
colors = pal,
opacity = 1) %>%
addLegend(pal = pal, values = values(x),
title = "Test")
leaflet() %>%
#addTiles() %>%
addRasterImage(x = x ,
colors = pal,
opacity = 1,
project = FALSE) %>%
addLegend(pal = pal, values = values(x),
title = "Test")
rm(x, test)
for (i in seq_along(target_cols)){
x <- rasterize(df[, 1:2], r, df[[target_cols[i]]])
if (grepl("growth", target_cols[i] )){
values(x) <- round(values(x), 3)
}
else{
values(x) <- round(values(x))
}
x <- setMinMax(x)
x <- projectRaster(x, crs = CRS('+init=EPSG:3857'),method = 'ngb')
x <- setMinMax(x)
file_name <- paste0(target_cols[i], ".tif")
writeRaster(x, file_name,options=c('TFW=YES'))
}
for (i in seq_along(target_cols)){
x <- rasterize(df[, 1:2], r, df[[target_cols[i]]])
if (grepl("growth", target_cols[i] )){
values(x) <- round(values(x), 3)
}
else{
values(x) <- round(values(x))
}
x <- setMinMax(x)
x <- projectRaster(x, crs = CRS('+init=EPSG:3857'),method = 'ngb')
x <- setMinMax(x)
file_name <- paste0(target_cols[i], ".tif")
writeRaster(x, file_name,options=c('TFW=YES'))
}
file_name = "C:/Users/lenovo/Documents/GitHub/sustainability_dashboard/dashboard_leaflet/opt_bin_cal.tif"
x <- raster(file_name)
x
# maybe source that out
pr <- projectExtent(x, CRS('+init=EPSG:3857'))
pr2 <- projectRaster(x, pr)
pr2
pr2 <- projectRaster(x, pr, method = 'ngb')
pr2
values(pr2) <- round(values(pr2))
pal = colorFactor(cmocean(name = 'curl', direction = -1, clip = 0.1)(11), sort(unique(values(pr2))),
ordered = TRUE,
na.color = "transparent")
leaflet() %>%
#addTiles() %>%
addRasterImage(x = pr2 ,
colors = pal,
opacity = 1,
project = FALSE) %>%
addLegend(pal = pal, values = values(pr2),
title = "Test")
crs4326 <- leafletCRS(crsClass = "L.Proj.CRS",
code='EPSG:4326',
proj4def="+proj=longlat +datum=WGS84 +no_defs")
crs4326 <- leafletCRS(crsClass = "L.Proj.CRS",
code='EPSG:4326',
proj4def="+proj=longlat +datum=WGS84 +no_defs",
resolutions = 2^(7:0))
values(x) <- round(values(x))
pal = colorFactor(cmocean(name = 'curl', direction = -1, clip = 0.1)(11), sort(unique(values(x))),
ordered = TRUE,
na.color = "transparent")
leaflet(options = leafletOptions(crs = crs4326)) %>%
#addTiles() %>%
addRasterImage(x = x ,
colors = pal,
opacity = 1,
project = FALSE) %>%
addLegend(pal = pal, values = values(x),
title = "Test")
leaflet(options = leafletOptions(crs = leafletCRS(crsClass = "L.CRS.EPSG4326"))) %>%
#addTiles() %>%
addRasterImage(x = x ,
colors = pal,
opacity = 1,
project = FALSE) %>%
addLegend(pal = pal, values = values(x),
title = "Test")
leaflet(options = leafletOptions(crs = leafletCRS(crsClass = "L.CRS.EPSG4326"))) %>%
#addTiles() %>%
addRasterImage(x = x ,
colors = pal,
opacity = 1,
project = TRUE) %>%
addLegend(pal = pal, values = values(x),
title = "Test")
pal = colorFactor(cmocean(name = 'curl', direction = -1, clip = 0.1)(11), sort(unique(values(pr2))),
ordered = TRUE,
na.color = "transparent")
leaflet() %>%
#addTiles() %>%
addRasterImage(x = pr2 ,
colors = pal,
opacity = 1,
project = FALSE) %>%
addLegend(pal = pal, values = values(pr2),
title = "Test")
x <- raster("bin_change_rcp2p6.tif") #filename
pal = colorFactor(cmocean(name = 'curl', direction = -1, clip = 0.1)(11), sort(unique(values(pr2))),
ordered = TRUE,
na.color = "transparent")
pal = colorFactor(cmocean(name = 'curl', direction = -1, clip = 0.1)(11), sort(unique(values(x))),
ordered = TRUE,
na.color = "transparent")
leaflet() %>%
#addTiles() %>%
addRasterImage(x = x ,
colors = pal,
opacity = 1,
project = FALSE) %>%
addLegend(pal = pal, values = values(x),
title = "Test")
x <- rasterize(df[, 1:2], r, df[[target_cols[2]]])
df[[target_cols[2]]]
unique(df[[target_cols[2]]])
unique(df[[target_cols[1]]])
df$changecal_rcp6p0[is.na(df$changecal_rcp6p0)]
df$changecal_rcp6p0[is.na(df$bin_change_rcp6p0)]
df$changecal_rcp8p5[is.na(df$bin_change_rcp8p5)]
df$changecal_rcp2p6[is.na(df$bin_change_rcp2p6)]
df$changecal_rcp6p0[df$bin_change_rcp6p0 == 19099.0153]
df$changecal_rcp6p0[df$bin_change_rcp6p0 == -19099.0153]
df$changecal_rcp6p0[df$bin_change_rcp6p0 <= -19099.0153]
df$changecal_rcp6p0[df$bin_change_rcp6p0 >= -19099.0153]
df$changecal_rcp6p0[df$bin_change_rcp6p0 >= 19099.0153]
df$changecal_rcp6p0[is.na(df$bin_change_rcp6p0)]
12086835235 / 110074439758
12086835235 / 89817383328
max(df$changecal_rcp6p0)
min(df$changecal_rcp6p0)
max(df$bin_change_rcp6p0)
max(df$bin_change_rcp6p0, na.rm = T)
# there is one problem -> rcp6p0 is negatively skewed but max values are positive
# assign the highest
df$bin_change_rcp6p0[df$bin_change_rcp6p0 > 19099]
# there is one problem -> rcp6p0 is negatively skewed but max values are positive
# assign the highest bin (its only 5 or so values)
df$bin_change_rcp6p0[is.na(df$bin_change_rcp6p0)] <- 19099.02
rm(pr, pr2, crs4326)
r <- raster(ncol = 4320, nrow = 2160,
xmn= -180, xmx= 180, ymn = -90, ymx = 90,
crs = "EPSG:4326")
x <- rasterize(df[, 1:2], r, df[[target_cols[2]]])
for (i in seq_along(target_cols)){
x <- rasterize(df[, 1:2], r, df[[target_cols[i]]])
if (grepl("growth", target_cols[i] )){
values(x) <- round(values(x), 3)
}
else{
values(x) <- round(values(x))
}
x <- setMinMax(x)
x <- projectRaster(x, crs = CRS('+init=EPSG:3857'),method = 'ngb')
x <- setMinMax(x)
file_name <- paste0(target_cols[i], ".tif")
writeRaster(x, file_name,options=c('TFW=YES'))
}
saveRDS(df, file = "bin_data.rds")
x <- raster("bin_change_rcp6p0.tif") #filename
unique(values(x))
for (i in target_cols){
file_name <- paste0(i, ".tif")
print(file_name)
}
df$log_change <- if_else(df$changecal_rcp6p0 > 0, log(df$changecal_rcp6p0),
- log(abs(df$changecal_rcp6p0)))
my_color <- cmocean(name = 'curl', direction = -1, clip = 0.1)(11)
my_color <- my_color[-6]
sort_values <- sort(unique(df$bin_change_rcp6p0))
names(my_color) <- as.character(sort_values)
unique(df$bin_change_rcp6p0)
sort_values <- sort(unique(round(df$bin_change_rcp6p0)))
sort_values[6]
sort_values <- sort_values[-6]
names(my_color) <- as.character(sort_values)
ggplot(df, aes(x = log_change, fill = as.character(hist))) +
geom_histogram(alpha = 0.7, bins = 200) +
scale_fill_manual(values = my_color, name = "Bin",
labels = sort_values)  +
labs(x = NULL,
y= NULL,
title = "Making bins based on distribution",
subtitle = "Example here logged absolute change of calories produced under RCP 6.0") +
theme_hc() +
theme(
plot.title = element_text(hjust = 0.5, color = "#4e4d47"),
plot.subtitle = element_text(hjust = 0.5, color = "#4e4d47"))
ggplot(df, aes(x = log_change, fill = as.character(df$bin_change_rcp6p0))) +
geom_histogram(alpha = 0.7, bins = 200) +
scale_fill_manual(values = my_color, name = "Bin",
labels = sort_values)  +
labs(x = NULL,
y= NULL,
title = "Making bins based on distribution",
subtitle = "Example here logged absolute change of calories produced under RCP 6.0") +
theme_hc() +
theme(
plot.title = element_text(hjust = 0.5, color = "#4e4d47"),
plot.subtitle = element_text(hjust = 0.5, color = "#4e4d47"))
ggplot(df, aes(x = log_change, fill = as.character(round(bin_change_rcp6p0)))) +
geom_histogram(alpha = 0.7, bins = 200) +
scale_fill_manual(values = my_color, name = "Bin",
labels = sort_values)  +
labs(x = NULL,
y= NULL,
title = "Making bins based on distribution",
subtitle = "Example here logged absolute change of calories produced under RCP 6.0") +
theme_hc() +
theme(
plot.title = element_text(hjust = 0.5, color = "#4e4d47"),
plot.subtitle = element_text(hjust = 0.5, color = "#4e4d47"))
mean(df$changecal_rcp6p0)
mean(df$changecal_rcp2p6)
median(df$changecal_rcp2p6)
mode(df$changecal_rcp2p6)
ggplot(df, aes(x = growth_ratecal_rcp2p6)) +
geom_histogram(bins = 200) +
theme_hc()
describe(df$growth_ratecal_rcp2p6)
summarise(df$growth_ratecal_rcp2p6)
summarize(df$growth_ratecal_rcp2p6)
ggplot(df, aes(x = growth_ratecal_rcp2p6)) +
geom_histogram(bins = 200) +
xlim(-1, 20) +
theme_hc()
ggplot(df, aes(x = growth_ratecal_rcp2p6)) +
geom_histogram(bins = 200) +
xlim(-1, 5) +
theme_hc()
ggplot(df, aes(x = growth_ratecal_rcp6p0)) +
geom_histogram(bins = 200) +
xlim(-1, 5) +
theme_hc()
df$scale_2p6 <- scale(df$growth_ratecal_rcp2p6)
ggplot(df, aes(x = scale_2p6)) +
geom_histogram(bins = 200) +
theme_hc()
ggplot(df, aes(x = scale_2p6)) +
geom_histogram(bins = 200) +
xlim(-1,1) +
theme_hc()
quantile(df$changecal_rcp2p6, probs = breaks)
quantile(df$changecal_rcp2p6[df$changecal_rcp2p6 < 0], probs = breaks)
quantile(df$changecal_rcp2p6[df$changecal_rcp2p6 > 0], probs = breaks)
quantile(df$changecal_rcp2p6[df$changecal_rcp2p6 > 0], probs = abs(1- breaks))
sd(scale_2p6)
sd(df$scale_2p6)
sd(df$scale_2p6, na.rm = T)
max(df$scale_2p6, na.rm = T)
min(df$scale_2p6, na.rm = T)
mean(df$scale_2p6, na.rm = T)
scale(df$changecal_rcp2p6)
df$scale_2p6 <- scale(df$changecal_rcp2p6)
ggplot(df, aes(x = scale_2p6)) +
geom_histogram(bins = 200) +
theme_hc()
ggplot(df, aes(x = scale_2p6)) +
geom_histogram(bins = 200) +
xlim(-20, 20) +
theme_hc()
ggplot(df, aes(x = scale_2p6)) +
geom_histogram(bins = 200) +
xlim(-3, 3) +
theme_hc()
ggplot(df, aes(x = scale_2p6)) +
geom_histogram(bins = 200) +
xlim(-3, 3) +
ylim(0, 50000) +
theme_hc()
installed.packages("downloadthis")
install.packages("downloadthis")
library(downloadthis)
source("~/GitHub/sustainability_webpage/data_pre.R", echo=TRUE)
print("Hello world")
